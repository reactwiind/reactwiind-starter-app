"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  findMatchArray: () => findMatchArray,
  findMatchObject: () => findMatchObject,
  getProps: () => getProps,
  highlight: () => highlight,
  objectsToArray: () => objectsToArray,
  objectsToString: () => objectsToString,
  toSlug: () => toSlug,
  useIsomorphicLayoutEffect: () => useIsomorphicLayoutEffect,
  usePrevious: () => usePrevious
});
module.exports = __toCommonJS(src_exports);

// src/toSlug.ts
function toSlug(str) {
  let s = str;
  if (!s) {
    return "";
  }
  s = s.toLowerCase().trim();
  s = s.replace(/ & /g, " and ");
  s = s.replace(/[ ]+/g, "-");
  s = s.replace(/[-]+/g, "-");
  s = s.replace(/[^a-z0-9-]+/g, "");
  return s;
}

// src/useIsomorphicLayoutEffect.tsx
var React = __toESM(require("react"));
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? React.useLayoutEffect : () => {
};

// src/usePrevious.tsx
var React2 = __toESM(require("react"));
function usePrevious(value) {
  const ref = React2.useRef(value);
  React2.useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// src/object.ts
function objectsToArray(object) {
  let result = [];
  Object.values(object).forEach((value) => {
    if (typeof value === "string") {
      result = [...result, value];
    } else if (typeof value === "object" && !Array.isArray(value) && value !== null) {
      result = [...result, ...objectsToArray(value)];
    }
    return void 0;
  });
  return result;
}
function objectsToString(object) {
  return objectsToArray(object).join(" ");
}
function findMatchArray(data, find, defaultValue) {
  const founded = data.findIndex((el) => el === find);
  return founded >= 0 ? find : defaultValue;
}
function findMatchObject(data, defaultValue) {
  const value = data ? data : defaultValue;
  return value;
}

// src/typography.ts
var import_react = require("react");
var HIGHLIGHT_PADDING = "px-2";
function getProps(text, highlights) {
  const { typography = {} } = highlights.find(
    (item) => (item == null ? void 0 : item.highlight) === text
  );
  return { padding: HIGHLIGHT_PADDING, ...typography };
}
function highlight(input, regexes, highlights, component) {
  if (!regexes.length)
    return input;
  const split = input.split(regexes[0]);
  const replacements = input.match(regexes[0]);
  const result = [];
  for (let i = 0; i < split.length - 1; i++) {
    result.push(
      highlight(split[i], regexes.slice(1), highlights, component)
    );
    result.push(
      (0, import_react.createElement)(
        component,
        {
          ...getProps(replacements == null ? void 0 : replacements[i], highlights)
        },
        replacements == null ? void 0 : replacements[i]
      )
    );
  }
  result.push(
    highlight(
      split[split.length - 1],
      regexes.slice(1),
      highlights,
      component
    )
  );
  return result;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  findMatchArray,
  findMatchObject,
  getProps,
  highlight,
  objectsToArray,
  objectsToString,
  toSlug,
  useIsomorphicLayoutEffect,
  usePrevious
});
