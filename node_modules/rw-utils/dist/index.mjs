// src/toSlug.ts
function toSlug(str) {
  let s = str;
  if (!s) {
    return "";
  }
  s = s.toLowerCase().trim();
  s = s.replace(/ & /g, " and ");
  s = s.replace(/[ ]+/g, "-");
  s = s.replace(/[-]+/g, "-");
  s = s.replace(/[^a-z0-9-]+/g, "");
  return s;
}

// src/useIsomorphicLayoutEffect.tsx
import * as React from "react";
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? React.useLayoutEffect : () => {
};

// src/usePrevious.tsx
import * as React2 from "react";
function usePrevious(value) {
  const ref = React2.useRef(value);
  React2.useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// src/object.ts
function objectsToArray(object) {
  let result = [];
  Object.values(object).forEach((value) => {
    if (typeof value === "string") {
      result = [...result, value];
    } else if (typeof value === "object" && !Array.isArray(value) && value !== null) {
      result = [...result, ...objectsToArray(value)];
    }
    return void 0;
  });
  return result;
}
function objectsToString(object) {
  return objectsToArray(object).join(" ");
}
function findMatchArray(data, find, defaultValue) {
  const founded = data.findIndex((el) => el === find);
  return founded >= 0 ? find : defaultValue;
}
function findMatchObject(data, defaultValue) {
  const value = data ? data : defaultValue;
  return value;
}

// src/typography.ts
import { createElement } from "react";
var HIGHLIGHT_PADDING = "px-2";
function getProps(text, highlights) {
  const { typography = {} } = highlights.find(
    (item) => (item == null ? void 0 : item.highlight) === text
  );
  return { padding: HIGHLIGHT_PADDING, ...typography };
}
function highlight(input, regexes, highlights, component) {
  if (!regexes.length)
    return input;
  const split = input.split(regexes[0]);
  const replacements = input.match(regexes[0]);
  const result = [];
  for (let i = 0; i < split.length - 1; i++) {
    result.push(
      highlight(split[i], regexes.slice(1), highlights, component)
    );
    result.push(
      createElement(
        component,
        {
          ...getProps(replacements == null ? void 0 : replacements[i], highlights)
        },
        replacements == null ? void 0 : replacements[i]
      )
    );
  }
  result.push(
    highlight(
      split[split.length - 1],
      regexes.slice(1),
      highlights,
      component
    )
  );
  return result;
}
export {
  findMatchArray,
  findMatchObject,
  getProps,
  highlight,
  objectsToArray,
  objectsToString,
  toSlug,
  useIsomorphicLayoutEffect,
  usePrevious
};
