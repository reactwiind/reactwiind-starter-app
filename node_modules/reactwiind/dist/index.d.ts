import * as React from 'react';
import React__default, { FC, PropsWithChildren, ComponentProps, ReactNode, ElementType } from 'react';

/** Common style types */
type FontSmoothingStyle = "antialiased" | string;
type LetterSpacingStyle = "tracking-normal" | string;
type FontFamilyStyle = "font-sans" | string;
type FontWeightStyle = "font-semibold" | string;
type ShadowStyle = "shadow-sm" | "shadow-secondary/10" | string;
type ActiveStyle = "active:opacity-[0.85]" | string;
type FocusStyle = "focus:opacity-[0.85]" | string;
type FontSizeStyle = "text-xs" | string;
type PaddingStyle = "p-1" | string;
type MarginStyle = "m-1" | string;
type Display = "block" | "inline-block" | string;
type LineHeight = "leading-tight" | string;
type LetterSpacing = "tracking-normal" | string;
type Height = "h-0" | "h-0.5" | "h-1" | "h-1.5" | "h-2" | "h-12" | "h-14" | "h-16" | "h-20" | "h-24" | "h-28" | "h-full" | "h-min" | "h-max" | "h-fit" | "h-1/2" | "h-1/3" | "h-2/3" | "h-1/4" | "h-2/4" | "h-3/4" | "h-1/5" | "h-2/5" | "h-3/5" | "h-5/6" | string;
type Width = "w-0" | "w-0.5" | "w-1" | "w-1.5" | "w-2" | "w-12" | "w-14" | "w-16" | "w-20" | "w-24" | "w-28" | "w-full" | "w-min" | "w-max" | "w-fit" | "w-1/2" | "w-1/3" | "w-2/3" | "w-1/4" | "w-2/4" | "w-3/4" | "w-1/5" | "w-2/5" | "w-3/5" | "w-5/6" | string;
type BorderStyle = "rounded-lg" | "border-secondary" | "border-1" | string;
type LayoutContainerStyle = "container" | string;
interface BaseStyleProps {
    padding?: PaddingStyle;
    display?: Display;
    margin?: MarginStyle;
    width?: Width;
    height?: Height;
    border?: BorderStyle;
    hover?: Style;
    shadow?: Style;
    rounded?: Style;
}
type BackgroundStyle = "bg-primary" | string;
type TextColorStyle = "text-primary" | string;
type HoverStyle = "hover:shadow-2xl" | string;
type FlexStyle = "flex" | "flex-auto" | "flex-initial" | "flex-none" | string;
type FlexDirection = "flex-row" | "flex-col";
type FlexGrow = "grow" | "grow-0" | string;
type FlexShrink = "shrink" | "shrink-0" | string;
type FlexOrder = "order-1" | "order-12" | "order-first" | "order-last" | "order-none" | string;
type GridOrder = FlexOrder;
type FlexWrap = "flex-wrap" | "flex-wrap-reverse" | "flex-nowrap" | string;
type FlexBasis = "basis-0" | "basis-2" | "basis-96" | "basis-1/2" | "basis-1/4" | "basis-full" | string;
type FlexAlignItems = "items-start" | "items-end" | "items-center" | "items-baseline" | "items-stretch" | string;
type JustifyContent = "justify-end" | "justify-start" | "justify-center" | "justify-between" | "justify-around" | "justify-evenly" | string;
type JustifyItems = "justify-items-end" | "justify-items-start" | "justify-items-center" | "justify-items-stretch" | string;
type GridJustifySelf = "justify-self-auto" | "justify-self-start" | "justify-self-end" | "justify-self-center" | "justify-self-stretch" | string;
type AlignContent = "content-center" | "content-start" | "content-end" | "content-between" | "content-around" | "content-evenly" | "content-baseline";
type AlignItems = "items-start" | "items-end" | "items-center" | "items-baseline" | "items-stretch" | string;
type AlignSelf = "self-auto" | "self-start" | "self-center" | "self-stretch" | "self-baseline" | string;
interface ContainerStyle extends BaseStyleProps {
}
interface SurfaceStyle extends BaseStyleProps {
}
type PlaceContent = "place-content-center" | "place-content-start" | "place-content-between" | "place-content-around" | "place-content-evenly" | "place-content-baseline" | "place-content-stretch" | string;
type PlaceItems = "place-items-start" | "place-items-center" | "place-items-baseline" | "place-items-stretch" | string;
type PlaceSelf = "place-self-auto" | "place-self-start" | "place-self-center" | "place-self-stretch" | string;
type GridCols = "grid-cols-1" | "grid-cols-2" | "grid-cols-12" | "grid-cols-none" | string;
type GridColSpan = "col-auto" | "col-span-1" | "col-span-12" | "col-span-full" | "col-start-1" | "col-start-2" | "col-start-13" | "col-start-auto" | "col-end-1" | "col-end-2" | "col-end-13" | "col-end-auto" | string;
type GridRows = "grid-rows-1" | "grid-rows-2" | "grid-rows-6" | "grid-rows-none" | string;
type GridRowSpan = "row-auto" | "row-span-1" | "row-span-2" | "row-span-6" | "row-span-full" | "row-start-1" | "row-start-2" | "row-start-7" | "row-start-auto" | "row-end-1" | "row-end-2" | "row-end-7" | "row-end-auto" | string;
type GridFlow = "grid-flow-row" | "grid-flow-col" | "grid-flow-dense" | "grid-flow-row-dense" | "grid-flow-col-dense" | string;
type GridAutoCols = "auto-cols-auto" | "auto-cols-min" | "auto-cols-max" | "auto-cols-fr" | string;
type GridAutoRows = "auto-rows-auto" | "auto-rows-min" | "auto-rows-max" | "auto-rows-fr" | string;
type Gap = "gap-0" | "gap-0.5" | "gap-1" | "gap-2" | "gap-3" | "gap-4" | "gap-12" | "gap-14" | "gap-x-0" | "gap-x-0.5" | "gap-x-1" | "gap-x-1.5" | "gap-x-2" | "gap-x-4" | "gap-x-5" | "gap-y-0" | "gap-y-0.5" | "gap-y-1" | "gap-y-1.5" | "gap-y-2" | "auto-rows-max" | "auto-rows-fr" | string;
type FillColorStyle = "fill-primary" | "fill-secondary" | string;
type ColumnStyle = "columns-1" | "columns-2" | "columns-12" | "columns-auto" | "columns-3xs" | "columns-2xs" | "columns-xs" | "columns-sm" | "columns-xl" | "columns-2xl" | "columns-7xl";
type Style = string;
interface GridBaseStyle extends BaseStyleProps {
    cols?: GridCols;
    colspan?: GridColSpan;
    rows?: GridRows;
    rowspan?: GridRowSpan;
    flow?: GridFlow;
    autocols?: GridAutoCols;
    autorows?: GridAutoRows;
    gap?: Gap;
    order?: GridOrder;
    alignItems?: AlignItems;
    justifyItems?: JustifyItems;
}
interface FlexBaseStyle extends BaseStyleProps {
    flex?: FlexStyle;
    grow?: FlexGrow;
    shrink?: FlexShrink;
    order?: FlexOrder;
    direction?: FlexDirection;
    wrap?: FlexWrap;
    basis?: FlexBasis;
    alignItems?: AlignItems;
    justifyContent?: JustifyContent;
    alignContent?: AlignContent;
    gap?: Gap;
}
interface BaseStyle extends BaseStyleProps {
    display?: Display;
    fontSmoothing?: FontSmoothingStyle;
    letterSpacing?: LetterSpacing;
    fontFamily?: FontFamilyStyle;
    fontSize?: FontSizeStyle;
    fontWeight?: FontWeightStyle;
    lineHeight?: LineHeight;
    color?: TextColorStyle;
    bgcolor?: BackgroundStyle;
    padding?: PaddingStyle;
}
/** Button Basewind Styles  */
interface ButtonBaseStyle extends BaseStyle {
    shadow?: ShadowStyle;
    focus?: FocusStyle;
    active?: ActiveStyle;
}
interface ButtonSizeStyle {
    fontSize: FontSizeStyle;
    py: PaddingStyle;
    px: PaddingStyle;
}
interface ButtonSizesStyle {
    sm: ButtonSizeStyle;
    md: ButtonSizeStyle;
    lg: ButtonSizeStyle;
    xl: ButtonSizeStyle;
}
interface ButtonVariantColorPropStyle {
    background?: BackgroundStyle;
    border?: BorderStyle;
    color?: TextColorStyle;
    hover?: HoverStyle;
}
type ButtonVariantColorAttr = "secondarycontained" | "secondaryoutlined" | "secondarycontained" | "secondaryoutlined" | "primarycontained" | "primaryoutlined" | "primarytext" | "successcontained" | "successoutlined" | "successtext" | "warningcontained" | "warningoutlined" | "warningtext" | "errorcontained" | "secondarytext" | "erroroutlined" | "errortext";
interface ButtonVariantColorStyle extends Record<ButtonVariantColorAttr, ButtonVariantColorPropStyle> {
}
interface ButtonBaseWindStyle {
    size?: ButtonSizesStyle;
    variantcolor?: ButtonVariantColorStyle;
    base?: ButtonBaseStyle;
}
interface ButtonGroupBaseWindStyle {
    base?: Style;
    horizontal?: FlexStyle;
    vertical?: FlexStyle;
}
/** Basewind for `Button` */
interface ButtonBaseWind {
    /** Basewind style for Button */
    styles?: ButtonBaseWindStyle;
}
/** Basewind for `Button` */
interface ButtonGroupBaseWind {
    /** Basewind style for Button */
    styles?: ButtonGroupBaseWindStyle;
}
/** Typography [STARTS HERE] */
type TypographyVariant = "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "lead" | "paragraph" | "small" | "link" | "display1" | "display2" | "display3" | "display4";
type color = "inherit" | "primary" | "secondary" | "success" | "danger" | "warning";
interface TypographyStyles extends Record<string, unknown> {
    variant: object;
}
interface TypographyFontStyle extends BaseStyle {
    base?: string;
}
type TypographyTextColor = "text-primary" | "text-secondary" | string;
interface TypographyTextColorStyle {
    textcolor: TypographyTextColor;
}
interface TypographyBaseWind {
    styles: {
        display1?: TypographyFontStyle;
        display2?: TypographyFontStyle;
        display3?: TypographyFontStyle;
        display4?: TypographyFontStyle;
        display5?: TypographyFontStyle;
        h1: TypographyFontStyle;
        h2: TypographyFontStyle;
        h3: TypographyFontStyle;
        h4: TypographyFontStyle;
        h5: TypographyFontStyle;
        h6: TypographyFontStyle;
        lead: TypographyFontStyle;
        small: TypographyFontStyle;
        paragraph: TypographyFontStyle;
        link: TypographyFontStyle;
        primary: TypographyTextColorStyle;
        secondary: TypographyTextColorStyle;
        success: TypographyTextColorStyle;
        danger: TypographyTextColorStyle;
        warning: TypographyTextColorStyle;
        onprimary: TypographyTextColorStyle;
        onsecondary: TypographyTextColorStyle;
        onbackground: TypographyTextColorStyle;
        onsurface: TypographyTextColorStyle;
    };
}
/** Typography [ENDS HERE] */
/** NavBar [ENDS HERE] */
interface NavBarBaseStyle {
    color: TextColorStyle;
    padding: PaddingStyle;
    bgcolor: BackgroundStyle;
    border: BorderStyle;
}
interface ContainerBaseStyle extends BaseStyle {
    layout: LayoutContainerStyle;
}
interface NavBarBaseWind {
    styles: {};
}
interface ContainerBaseWind {
    styles: {
        base: ContainerBaseStyle;
    };
}
interface HeroBaseWind {
    styles: {
        base: BaseStyle;
        "1": GridBaseStyle;
        "2": GridBaseStyle;
    };
}
interface GridBaseWind {
    styles: {
        base: GridBaseStyle;
    };
}

/**
   Box Props, new component
*/
interface BoxProps extends BaseStyle {
    children?: React__default.ReactNode;
    className?: string;
}
declare const Box: FC<BoxProps>;

type variants = "contained" | "outlined" | "text";
type colors = "primary" | "secondary" | "success" | "error";
type sizes = "sm" | "md" | "lg" | "xl";
/**
   Button Props updated
*/
interface ButtonProps extends ButtonBaseStyle {
    children?: React__default.ReactNode | string;
    /**
     Button variants that define the intensity of the action for which a button is used.
    */
    variant?: variants;
    /**
     `Colors` define the the purpose of the action it's used for, like primary action, secondary action, error so on
    */
    color?: colors;
    text?: string;
    size?: sizes;
    onClick?: (e: any) => void;
    /**
     If a button is used width full width
    */
    fullwidth?: boolean;
    className?: string;
    id?: string;
}
declare const Button: FC<ButtonProps>;

/**
   IconButton Props
*/
interface ButtonGroupProps extends ButtonProps {
    onClick?: (event: React__default.MouseEvent<HTMLButtonElement>) => void;
    vertical?: boolean;
}
declare const ButtonGroup: FC<ButtonGroupProps>;

interface CardProps extends PropsWithChildren<ComponentProps<'div'>>, SurfaceProps {
    className?: Style;
    description?: string | ReactNode;
}
declare const Card: FC<CardProps>;

interface CardIconTextProps extends PropsWithChildren<ComponentProps<'div'>>, IconTextProps {
    className?: Style;
    description?: string | ReactNode;
}
declare const CardIconText: FC<CardIconTextProps>;

interface ContainerProps$1 extends PropsWithChildren<ComponentProps<'div'>>, FlexBaseStyle {
    className?: string;
    bgcolor?: string;
    center?: boolean;
    surface?: SurfaceProps;
}
declare const Container: FC<ContainerProps$1>;

type ContentProp = TypographyHighlightProps | TypographyProps;
interface ContentProps extends BaseStyleProps {
    content?: Array<ContentProp>;
}
declare const Content: FC<ContentProps>;

/**
   Flex Props
*/
interface FlexProps extends FlexBaseStyle {
    children?: React__default.ReactNode;
    className?: string;
}
declare const Flex: FC<FlexProps>;

interface FooterProps {
    children?: React.ReactNode;
    text?: string;
    bgcolor?: string;
    col?: string;
}
declare function FooterComponent({ children, col, bgcolor }: FooterProps): JSX.Element;
declare namespace FooterComponent {
    var displayName: string;
}
declare const Footer: typeof FooterComponent & {
    Column: React.FC<ColumnProps>;
};

interface GridItemProps extends GridBaseStyle {
    className?: Style;
    children: ReactNode;
}

/**
   Grid Props
*/
interface GridProps extends GridBaseStyle {
    children?: React__default.ReactNode;
    className?: string;
}
declare const GridComponent: FC<GridProps>;
declare const Grid: React__default.FC<GridProps> & {
    Item: React__default.FC<GridItemProps>;
};

interface HeroItemProps extends GridItemProps {
    container?: boolean | ContainerProps$1;
}

declare const hero: HeroBaseWind;

interface HeroProps extends PropsWithChildren<ComponentProps<'div'>>, GridBaseStyle {
    className?: string;
    container?: ContainerProps$1;
}
declare const Hero: FC<HeroProps> & {
    Item: FC<HeroItemProps>;
};

/**
   IconButton Props
*/
interface IconButtonProps extends ButtonProps {
    icon?: string;
    fill?: string;
    alignIcon?: "left" | "right";
}
declare const IconButton: FC<IconButtonProps>;

interface IconTextProps extends ComponentProps<'div'> {
    icon?: any;
    text?: string;
    variant?: TypographyVariant;
    fill?: FillColorStyle;
}
declare const IconText: FC<IconTextProps>;

interface ImageTextProps extends ComponentProps<'div'> {
    img?: (props: any) => JSX.Element;
    vertical?: boolean;
    caption?: string;
    title?: string;
    subtitle?: string;
    desc?: string;
    aligncontent?: string;
    demo?: boolean;
}
declare const ImageText: FC<ImageTextProps>;

type asType = ElementType;
type textGradient = boolean;
type className = string;
type children = ReactNode;
interface TypographyProps extends TypographyFontStyle {
    variant?: TypographyVariant;
    color?: string;
    bgcolor?: string;
    textGradient?: textGradient;
    as?: asType;
    className?: className;
    children?: children;
    ref?: object;
}
declare const Typography: FC<TypographyProps>;

interface LinkProps {
    children?: React__default.ReactNode | string;
    text?: string;
    href?: string;
    className?: string;
    icon?: ReactNode;
    typographyProps?: TypographyProps;
}
declare const Link: FC<LinkProps>;

interface NavBarLinkProps extends PropsWithChildren<ComponentProps<'a'>> {
    active?: boolean;
    disabled?: boolean;
    href?: string;
}

interface NavBarLinksProps {
    links?: Array<NavBarLinkProps>;
}

interface NavBarCollapseProps extends PropsWithChildren<ComponentProps<'div'>> {
    children?: React__default.ReactNode;
    className?: string;
}

type NavBarLogoProps = PropsWithChildren<ComponentProps<'a'>>;

interface NavBarProps extends PropsWithChildren<ComponentProps<'nav'>> {
    rounded?: boolean;
    border?: boolean;
}
declare const NavBar: FC<NavBarProps> & {
    Logo: FC<NavBarLogoProps>;
    Collapse: FC<NavBarCollapseProps>;
    Link: FC<NavBarLinkProps>;
    Links: FC<NavBarLinksProps>;
};

type BorderColor = "shadow-primary" | "shadow-primary-100" | "shadow-primary-200" | "border-primary-300" | "border-primary-400" | "border-primary-500" | "border-primary-600" | "border-primary-700" | "border-primary-800" | "border-primary-900" | "border-acccent" | "border-secondary-100" | "border-secondary-200" | "border-secondary-300" | "border-secondary-400" | "border-secondary-500" | "border-secondary-600" | "border-secondary-700" | "border-secondary-800" | "border-secondary-900" | "border-acccent" | "border-acccent-100" | "border-acccent-200" | "border-acccent-300" | "border-acccent-400" | "border-acccent-500" | "border-acccent-600" | "border-acccent-700" | "border-acccent-800" | "border-acccent-900";
type ShadowColor = "shadow-primary" | "shadow-primary-100" | "shadow-primary-200" | "shadow-primary-300" | "shadow-primary-400" | "shadow-primary-500" | "shadow-primary-600" | "shadow-primary-700" | "shadow-primary-800" | "shadow-primary-900" | "shadow-secondary" | "shadow-secondary-100" | "shadow-secondary-200" | "shadow-secondary-300" | "shadow-secondary-400" | "shadow-secondary-500" | "shadow-secondary-600" | "shadow-secondary-700" | "shadow-secondary-800" | "shadow-secondary-900" | "shadow-acccent" | "shadow-acccent-100" | "shadow-acccent-200" | "shadow-acccent-300" | "shadow-acccent-400" | "shadow-acccent-500" | "shadow-acccent-600" | "shadow-acccent-700" | "shadow-acccent-800" | "shadow-acccent-900";
type TextColor = "text-primary" | "text-primary-900" | "text-secondary" | "text-acccent-900" | "text-acccent" | "text-acccent-900";
type BackgroundColor = "bg-primary" | "bg-primary-50" | "bg-primary-100" | "bg-primary-200" | "bg-primary-300" | "bg-primary-400" | "bg-primary-500" | "bg-primary-600" | "bg-primary-700" | "bg-primary-800" | "bg-primary-900" | "bg-secondary" | "bg-secondary-50" | "bg-secondary-100" | "bg-secondary-200" | "bg-secondary-300" | "bg-secondary-400" | "bg-secondary-500" | "bg-secondary-600" | "bg-secondary-700" | "bg-secondary-800" | "bg-secondary-900" | "bg-acccent" | "bg-acccent-50" | "bg-acccent-100" | "bg-acccent-200" | "bg-acccent-300" | "bg-acccent-400" | "bg-acccent-500" | "bg-acccent-600" | "bg-acccent-700" | "bg-acccent-800" | "bg-acccent-900";

interface ElementWind {
    cls?: string;
    themed?: string;
}
type Theme = "theme-cw" | "theme-mw" | "dark";
declare const defaultTheme = "theme-mw";
type BaseWindStyle = string;
type Mode = "light" | "dark";
interface ThemeContextProps {
    theme?: Theme;
    mode?: Mode;
    toggleMode?: () => void;
    changeTheme?: (theme: Theme) => void;
    getStyles?: (path: string, prop?: string) => string | object | null;
    getClasses?: (path: string, prop?: string, srcAsObject?: boolean) => string;
}

declare const ThemeContext: React.Context<ThemeContextProps>;
interface ThemeProviderProps {
    children: ReactNode;
    value?: ThemeContextProps;
}
declare const ThemeProvider: FC<ThemeProviderProps>;
declare function useTheme(): ThemeContextProps;

interface ContainerProps extends PropsWithChildren<ComponentProps<'div'>> {
    className?: string;
    bgcolor?: string;
    center?: boolean;
}
declare const DemoContainer: FC<ContainerProps>;

interface DividerProps {
    children?: React.ReactNode;
    className?: string;
}
declare const Underline: React.FC<DividerProps>;

interface SpacerProps extends PropsWithChildren<ComponentProps<'nav'>> {
    rounded?: boolean;
    border?: boolean;
}
declare const Spacer: FC<SpacerProps>;

interface SurfaceProps extends SurfaceStyle {
    elevation?: string;
    bgcolor?: BackgroundStyle;
    color?: TextColorStyle;
    children?: React__default.ReactNode;
    className?: string;
}
declare const Surface: FC<SurfaceProps>;

interface ColumnProps {
    className?: Style;
    children: ReactNode;
    col?: ColumnStyle;
}
declare const Column: FC<ColumnProps>;

type TypographyHighlightWords = string;
/**
 * Typography Highlights Objects with Typography configration for each highlight
 */
interface TypographyHighlightProps extends TypographyProps {
    highlights?: Array<TypographyHighlight>;
}
/**
 * Typography Highlight Object with Typography configration for each highlight
 */
interface TypographyHighlight {
    highlight: TypographyHighlightWords;
    typography: TypographyProps;
}
/**
 *
 * Typography `Highlight` Component is used to highlight
 * given words in `TypographyHighlightProps`
 *
 * */
declare const TypographyHighlight: FC<TypographyHighlightProps>;

interface UnderlinedTypographyProps extends TypographyProps {
}
declare const UnderlinedTypography: FC<UnderlinedTypographyProps>;

interface DropDownProps extends PropsWithChildren<ComponentProps<'select'>> {
}
declare const DropDown: FC<DropDownProps>;

interface ImageContentProps {
    img?: (props: any) => JSX.Element;
    className?: string;
    swapcols?: boolean;
    heading?: string;
    subheading?: string;
    desc?: string;
}
declare const ImageContent: FC<ImageContentProps>;

declare function AllPalettes(): JSX.Element;

export { ActiveStyle, AlignContent, AlignItems, AlignSelf, AllPalettes, BackgroundColor, BackgroundStyle, BaseStyle, BaseStyleProps, BaseWindStyle, BorderColor, BorderStyle, Box, BoxProps, Button, ButtonBaseStyle, ButtonBaseWind, ButtonBaseWindStyle, ButtonGroup, ButtonGroupBaseWind, ButtonGroupBaseWindStyle, ButtonGroupProps, ButtonProps, ButtonSizeStyle, ButtonSizesStyle, ButtonVariantColorPropStyle, ButtonVariantColorStyle, Card, CardIconText, CardIconTextProps, Column, ColumnProps, ColumnStyle, Container, ContainerBaseStyle, ContainerBaseWind, ContainerProps$1 as ContainerProps, ContainerStyle, Content, ContentProp, ContentProps, DemoContainer, Display, DividerProps, DropDown, DropDownProps, ElementWind, FillColorStyle, Flex, FlexAlignItems, FlexBaseStyle, FlexBasis, FlexDirection, FlexGrow, FlexOrder, FlexProps, FlexShrink, FlexStyle, FlexWrap, FocusStyle, FontFamilyStyle, FontSizeStyle, FontSmoothingStyle, FontWeightStyle, Footer, FooterProps, Gap, Grid, GridAutoCols, GridAutoRows, GridBaseStyle, GridBaseWind, GridColSpan, GridCols, GridComponent, GridFlow, GridJustifySelf, GridOrder, GridProps, GridRowSpan, GridRows, Height, Hero, HeroBaseWind, HeroProps, HoverStyle, IconButton, IconButtonProps, IconText, IconTextProps, ImageContent, ImageContentProps, ImageText, ImageTextProps, JustifyContent, JustifyItems, LayoutContainerStyle, LetterSpacing, LetterSpacingStyle, LineHeight, Link, LinkProps, MarginStyle, Mode, NavBar, NavBarBaseStyle, NavBarBaseWind, NavBarCollapseProps, NavBarLinkProps, NavBarLinksProps, NavBarLogoProps, NavBarProps, PaddingStyle, PlaceContent, PlaceItems, PlaceSelf, ShadowColor, ShadowStyle, Spacer, SpacerProps, Style, Surface, SurfaceProps, SurfaceStyle, TextColor, TextColorStyle, Theme, ThemeContext, ThemeContextProps, ThemeProvider, Typography, TypographyBaseWind, TypographyFontStyle, TypographyHighlight, TypographyHighlightProps, TypographyHighlightWords, TypographyProps, TypographyStyles, TypographyTextColor, TypographyTextColorStyle, TypographyVariant, Underline, UnderlinedTypography, UnderlinedTypographyProps, Width, asType, children, className, color, colors, defaultTheme, hero, sizes, textGradient, useTheme, variants };
