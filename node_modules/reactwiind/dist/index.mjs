// src/Box/index.tsx
import classNames from "classnames";

// src/theme/index.tsx
import { createContext, useContext, useEffect, useState } from "react";

// src/utils/browser.ts
var windowExists = () => typeof window !== "undefined";

// src/theme/baseWind/navbar.ts
var navbar = {
  styles: {
    nav: {
      base: {
        color: "text-onprimary",
        padding: "py-4",
        bgcolor: "",
        border: "border-gray-200",
        width: "w-full"
      },
      container: {
        margin: "mx-auto",
        flex: "mx-auto flex flex-wrap items-center justify-between"
      }
    },
    logo: "flex items-center",
    collapse: {
      base: "w-full md:block md:w-auto",
      list: "mt-4 flex flex-col md:mt-0 md:flex-row md:space-x-8 md:text-sm md:font-medium"
    },
    link: {
      base: "block py-2 pr-4 pl-3 md:p-0"
    }
  }
};

// src/theme/baseWind/hero.ts
var hero = {
  styles: {
    base: {
      height: "min-h-[200px]"
    },
    "1": {
      cols: "grid-cols-1"
    },
    "2": {
      cols: "grid-cols-1 xl:grid-cols-2"
    }
  }
};

// src/theme/baseWind/typography.ts
var font = {
  fontSmoothing: "antialiased",
  letterSpacing: "tracking-normal",
  fontFamily: "font-sans",
  color: "",
  bgcolor: ""
};
var typography = {
  styles: {
    display1: {
      ...font,
      fontSize: "text-9xl",
      fontWeight: "font-semibold",
      lineHeight: "leading-tight"
    },
    display2: {
      ...font,
      fontSize: "text-8xl",
      fontWeight: "font-semibold",
      lineHeight: "leading-tight"
    },
    display3: {
      ...font,
      fontSize: "text-5xl sm:text-7xl",
      fontWeight: "font-semibold",
      lineHeight: "leading-tight"
    },
    display4: {
      ...font,
      fontSize: "text-6xl",
      fontWeight: "font-semibold",
      lineHeight: "leading-tight"
    },
    h1: {
      ...font,
      display: "block",
      fontSize: "text-5xl",
      fontWeight: "font-semibold",
      lineHeight: "leading-tight"
    },
    h2: {
      ...font,
      fontSize: "text-4xl",
      fontWeight: "font-semibold",
      lineHeight: "leading-[1.3]"
    },
    h3: {
      ...font,
      fontSize: "text-3xl",
      fontWeight: "font-semibold",
      lineHeight: "leading-snug"
    },
    h4: {
      ...font,
      fontSize: "text-lg md:text-2xl",
      fontWeight: "font-semibold",
      lineHeight: "leading-snug"
    },
    h5: {
      ...font,
      display: "block",
      fontSize: "text-xl",
      fontWeight: "font-semibold",
      lineHeight: ""
    },
    h6: {
      ...font,
      fontSize: "text-base",
      fontWeight: "font-semibold",
      lineHeight: "leading-relaxed"
    },
    lead: {
      display: "block",
      fontSmoothing: "antialiased",
      fontFamily: "font-sans",
      fontSize: "text-xl",
      fontWeight: "font-normal",
      lineHeight: "leading-relaxed"
    },
    paragraph: {
      display: "block",
      fontSmoothing: "antialiased",
      fontFamily: "font-sans",
      fontSize: "text-base",
      fontWeight: "font-light",
      lineHeight: "leading-relaxed"
    },
    small: {
      display: "block",
      fontSmoothing: "antialiased",
      fontFamily: "font-sans",
      fontSize: "text-sm",
      fontWeight: "font-light",
      lineHeight: "leading-normal"
    },
    link: {
      display: "inline",
      fontSmoothing: "antialiased",
      fontFamily: "font-sans",
      fontSize: "text-sm",
      fontWeight: "font-light",
      lineHeight: "leading-normal"
    },
    primary: {
      textcolor: "text-primary"
    },
    secondary: {
      textcolor: "text-secondary"
    },
    success: {
      textcolor: "text-success"
    },
    danger: {
      textcolor: "text-danger"
    },
    warning: {
      textcolor: "text-warning"
    },
    onprimary: {
      textcolor: "text-onprimary"
    },
    onsecondary: {
      textcolor: "text-onsecondary"
    },
    onbackground: {
      textcolor: "text-onbackground"
    },
    onsurface: {
      textcolor: "text-onsurface"
    }
  }
};

// src/theme/baseWind/icontext.ts
var icontext = {
  styles: {
    base: "flex items-center flex-0",
    icon: "inline-display",
    text: "leading-[3rem] ml-2"
  }
};

// src/theme/baseWind/container.ts
var container = {
  styles: {
    base: {
      layout: "container",
      margin: "mx-auto",
      padding: "p-4"
    }
  }
};

// src/theme/baseWind/imagetext.ts
var imagetext = {
  styles: {
    base: "flex opacity-80 te",
    textbase: "flex flex-col",
    vertical: "flex-col py-4",
    horizontal: "flex-row px-4"
  }
};

// src/theme/baseWind/button.ts
var base = {
  shadow: `shadow-sm shadow-secondary/10`,
  focus: `focus:opacity-[0.85] focus:shadow-none`,
  active: `active:opacity-[0.85] active:shadow-none`,
  fontSmoothing: "antialiased",
  letterSpacing: "tracking-normal",
  fontFamily: "font-sans",
  fontWeight: "font-semibold"
};
var buttonGroup = {
  base: "inline-flex flex-auto items-center",
  horizontal: "flex-row",
  vertical: "flex-col"
};
var size = {
  sm: {
    fontSize: "text-xs",
    py: "py-2",
    px: "px-4"
  },
  md: {
    fontSize: "text-sm",
    py: "py-3",
    px: "px-6"
  },
  lg: {
    fontSize: "text-md",
    py: "py-3.5",
    px: "px-7"
  },
  xl: {
    fontSize: "text-lg",
    py: "py-4",
    px: "px-8"
  }
};
var variantcolor = {
  secondarycontained: {
    background: "bg-secondary",
    color: "text-onsecondary",
    hover: `hover:shadow hover:shadow-secondary/30 hover:bg-opacity-80`
  },
  secondaryoutlined: {
    background: "",
    border: "border border-2 border-secondary",
    color: "text-secondary",
    hover: `hover:shadow-2xl hover:shadow-secondary/90 hover:bg-secondary hover:bg-opacity-10`
  },
  secondarytext: {
    color: "text-secondary",
    hover: `hover:shadow-2xl hover:shadow-secondary/10 hover:bg-secondary hover:bg-opacity-20`
  },
  primarycontained: {
    background: "bg-primary",
    color: "text-onprimary",
    hover: `hover:shadow-sm hover:shadow-primary/70 hover:bg-opacity-80`
  },
  primaryoutlined: {
    background: "",
    border: "border border-2 border-primary",
    color: "text-primary",
    hover: `hover:shadow-sm hover:shadow-primary/90 hover:bg-primary hover:bg-opacity-20`
  },
  primarytext: {
    background: "bg-transparent",
    color: "text-primary",
    hover: ` hover:bg-primary hover:bg-opacity-20`
  },
  successcontained: {
    background: "bg-success",
    color: "text-white",
    hover: `hover:shadow-sm border-2 border-success border-opacity-10 hover:shadow-success/70 hover:bg-opacity-80`
  },
  successoutlined: {
    background: "",
    border: "border border-2 border-success",
    color: "text-success",
    hover: `hover:shadow-sm hover:shadow-success/90 hover:bg-success hover:bg-opacity-20`
  },
  successtext: {
    background: "bg-transparent",
    color: "text-success",
    hover: ` hover:bg-success hover:bg-opacity-20`
  },
  warningcontained: {
    background: "bg-warning",
    color: "text-white",
    hover: `hover:shadow-sm hover:shadow-warning/70 hover:bg-opacity-80`
  },
  warningoutlined: {
    background: "",
    border: "border border-2 border-warning",
    color: "text-warning",
    hover: `hover:shadow-sm hover:shadow-warning/90 hover:bg-warning hover:bg-opacity-20`
  },
  warningtext: {
    background: "bg-transparent",
    color: "text-warning",
    hover: ` hover:bg-warning hover:bg-opacity-20`
  },
  errorcontained: {
    background: "bg-danger",
    color: "text-white",
    hover: `hover:shadow-sm hover:shadow-danger/70 hover:bg-opacity-80`
  },
  erroroutlined: {
    background: "",
    border: "border border-2 border-danger",
    color: "text-danger",
    hover: `hover:shadow-sm hover:shadow-danger/90 hover:bg-danger hover:bg-opacity-20`
  },
  errortext: {
    background: "bg-transparent",
    color: "text-danger",
    hover: ` hover:bg-danger hover:bg-opacity-20`
  }
};
var buttonBaseWind = {
  styles: {
    base,
    size,
    variantcolor
  }
};
var buttonGroupBaseWind = {
  styles: {
    ...buttonGroup
  }
};

// src/theme/reactWind/baseWind.ts
var baseWind = {
  icontext,
  imagetext,
  navbar,
  button: buttonBaseWind,
  hero,
  container,
  typography,
  buttonGroup: buttonGroupBaseWind
};

// src/theme/reactWind/themeWind.ts
var defaultTheme = "theme-mw";

// src/theme/index.tsx
import { objectsToString } from "rw-utils";
import { jsx } from "react/jsx-runtime";
var ThemeContext = createContext({
  theme: defaultTheme,
  toggleMode: () => {
  },
  changeTheme: (theme) => {
  },
  getStyles: (path, prop) => "",
  getClasses: (path, prop, srcAsObject) => ""
});
var ThemeProvider = ({ children, value }) => {
  const { theme: themeValue } = value || {};
  const saveSelectedTheme = (newmode) => localStorage.setItem("theme", newmode);
  const getSelectedTheme = () => {
    let selectedTheme = themeValue != null ? themeValue : defaultTheme;
    if (localStorage.getItem("theme") != "undefined" && localStorage.getItem("theme") != "null")
      selectedTheme = localStorage.getItem("theme");
    return selectedTheme;
  };
  const isDark = () => {
    var _a;
    return windowExists() && ((_a = window.matchMedia) == null ? void 0 : _a.call(window, "(prefers-color-scheme: dark)").matches);
  };
  const [theme, setTheme] = useState(themeValue != null ? themeValue : defaultTheme);
  const toggleMode = () => {
    const newMode = getSelectedTheme() === "dark" ? theme : "dark";
    setMode(newMode);
  };
  const changeTheme = (theme2) => {
    setMode(theme2);
  };
  const setMode = (theme2) => {
    console.log("setmode", theme2);
    if (!windowExists()) {
      return;
    }
    saveSelectedTheme(theme2);
    setTheme(theme2);
    if (theme2) {
      document.documentElement.setAttribute("data-theme", theme2);
      return;
    }
  };
  const getStyles = (path, prop = "") => {
    const props = path.split(".");
    props.splice(1, 0, !!prop ? "defaultProps" : "styles");
    const addedStylePropPath = props.join(".");
    const ret = addedStylePropPath.replace(/\[([^\[\]]*)\]/g, ".$1.").split(".").filter((t) => t !== "").reduce((prev, cur) => prev && prev[cur], baseWind);
    return ret;
  };
  const getClasses = (src, prop = "", srcAsObject = false) => {
    var _a;
    console.log("classes->", src);
    if (srcAsObject) {
      return getStyles(src, "");
    } else if (typeof src == "object") {
      return objectsToString(src);
    } else {
      return objectsToString((_a = getStyles(src, prop)) != null ? _a : {});
    }
  };
  useEffect(() => {
    setMode(getSelectedTheme());
  }, []);
  return /* @__PURE__ */ jsx(ThemeContext.Provider, {
    value: { theme, getStyles, getClasses, ...baseWind, toggleMode, changeTheme },
    children
  });
};
function useTheme() {
  return useContext(ThemeContext);
}

// src/Box/index.tsx
import { twMerge } from "tailwind-merge";
import { jsx as jsx2 } from "react/jsx-runtime";
var Box = ({ children, className, ...rest }) => {
  const { getClasses } = useTheme();
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ ...rest });
  const styles = twMerge(overridesDefaults, className);
  return /* @__PURE__ */ jsx2("div", {
    className: classNames(styles),
    children
  });
};

// src/Button/index.tsx
import classNames2 from "classnames";
import { twMerge as twMerge2 } from "tailwind-merge";
import { jsx as jsx3 } from "react/jsx-runtime";
var Button = ({ fullwidth = false, variant = "contained", size: size2 = "md", color = "secondary", text, children = "", className, onClick = () => {
}, ...rest }) => {
  const { getClasses } = useTheme();
  const baseStyle = getClasses == null ? void 0 : getClasses("button.base" /* BASE */);
  const variantcolorStyle = getClasses == null ? void 0 : getClasses(`${"button.variantcolor" /* VAR_COL */}.${color}${variant}`);
  const sizeStyle = getClasses == null ? void 0 : getClasses(`${"button.size" /* SIZE */}.${size2}`);
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ color, ...rest });
  const styles = twMerge2(baseStyle, variantcolorStyle, sizeStyle, overridesDefaults, className);
  return /* @__PURE__ */ jsx3("button", {
    ...rest,
    onClick,
    className: classNames2(styles),
    children
  });
};
Button.displayName = "Button";

// src/ButtonGroup/index.tsx
import classNames3 from "classnames";
import React, { cloneElement } from "react";
import { jsx as jsx4 } from "react/jsx-runtime";
var ButtonGroup = ({ size: size2 = "sm", vertical = false, variant = "contained", color = "primary", onClick = () => {
}, children, ...rest }) => {
  const { getClasses } = useTheme();
  const baseStyle = getClasses == null ? void 0 : getClasses("buttonGroup.base" /* BASE */);
  const directionStyle = vertical ? getClasses == null ? void 0 : getClasses("buttonGroup.vertical" /* VERTICAL */) : getClasses == null ? void 0 : getClasses("buttonGroup.horizontal" /* HORIZONTAL */);
  const styles = classNames3(baseStyle, directionStyle);
  let elements = React.Children.toArray(children);
  let childElements = [];
  childElements = elements.map((element) => {
    const childProps = { size: size2, variant, color, onClick, ...rest };
    return cloneElement(element, { ...childProps });
  });
  return /* @__PURE__ */ jsx4("div", {
    className: styles,
    children: childElements
  });
};
ButtonGroup.displayName = "ButtonGroup";

// src/Card/index.tsx
import { jsx as jsx5 } from "react/jsx-runtime";
var Card = ({ children, ...rest }) => {
  return /* @__PURE__ */ jsx5(Surface, {
    ...rest,
    children
  });
};

// src/CardIconText/index.tsx
import { jsx as jsx6, jsxs } from "react/jsx-runtime";
var CardIconText = ({ icon, text, description, ...rest }) => {
  return /* @__PURE__ */ jsx6(Card, {
    ...rest,
    children: /* @__PURE__ */ jsxs(Flex, {
      direction: "flex-col",
      padding: "p-4",
      children: [
        /* @__PURE__ */ jsx6(IconText, {
          icon,
          text
        }),
        /* @__PURE__ */ jsx6(Typography, {
          variant: "paragraph",
          children: description
        })
      ]
    })
  });
};

// src/Container/index.tsx
import classNames4 from "classnames";
import { twMerge as twMerge3 } from "tailwind-merge";
import { jsx as jsx7 } from "react/jsx-runtime";
var STYLE_PROPS = {
  BASE: "container.base",
  SURFACE: "container.surface"
};
var Container = ({ children, surface = {}, bgcolor = "", className, ...rest }) => {
  console.log("surefed", surface);
  const { getClasses } = useTheme();
  const baseStyle = getClasses == null ? void 0 : getClasses(STYLE_PROPS.BASE);
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ bgcolor, ...rest });
  const surfaced = typeof surface == "object" && surface;
  const styles = twMerge3(baseStyle, overridesDefaults, className);
  const ContainerChild = () => /* @__PURE__ */ jsx7(Flex, {
    "data-component": "container",
    className: classNames4(styles),
    children
  });
  const SurfacedContainer = () => /* @__PURE__ */ jsx7(Surface, {
    ...surface,
    children: /* @__PURE__ */ jsx7(ContainerChild, {})
  });
  return /* @__PURE__ */ jsx7(SurfacedContainer, {});
};

// src/Content/index.tsx
import { Fragment, jsx as jsx8, jsxs as jsxs2 } from "react/jsx-runtime";
var Content = ({ content = [], ...rest }) => {
  const comps = content.map((typProps) => {
    const Component = (typProps == null ? void 0 : typProps.highlights) ? TypographyHighlight : Typography;
    const tProps = typProps != null ? typProps : null;
    return tProps ? /* @__PURE__ */ jsx8(Component, {
      ...{ padding: "pb-4", ...rest, ...tProps }
    }) : tProps;
  });
  return /* @__PURE__ */ jsxs2(Fragment, {
    children: [
      " ",
      comps,
      " "
    ]
  });
};

// src/Flex/index.tsx
import classNames5 from "classnames";
import { twMerge as twMerge4 } from "tailwind-merge";
import { jsx as jsx9 } from "react/jsx-runtime";
var displayProp = "flex";
var Flex = ({ children, direction = "flex-row", className, ...rest }) => {
  const { getClasses } = useTheme();
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ displayProp, direction, ...rest });
  const styles = twMerge4(overridesDefaults, className);
  return /* @__PURE__ */ jsx9("div", {
    className: classNames5(styles, className),
    children
  });
};
Flex.displayName = "Flex";

// src/Footer/index.tsx
import classNames6 from "classnames";
import { jsx as jsx10 } from "react/jsx-runtime";
function FooterComponent({ children, col = "grid grid-cols-3", bgcolor = "bg-secondary" }) {
  return /* @__PURE__ */ jsx10(Container, {
    children: /* @__PURE__ */ jsx10("footer", {
      className: "w-full border-t",
      children: /* @__PURE__ */ jsx10("div", {
        className: classNames6(col, "p-4 min-h-[500px]"),
        children
      })
    })
  });
}
FooterComponent.displayName = "Footer";
var Footer = Object.assign(FooterComponent, {
  Column
});

// src/Grid/index.tsx
import classNames8 from "classnames";
import { twMerge as twMerge6 } from "tailwind-merge";

// src/Grid/GridItem.tsx
import classNames7 from "classnames";
import { twMerge as twMerge5 } from "tailwind-merge";
import { jsx as jsx11 } from "react/jsx-runtime";
var GridItem = ({ children, padding = "pr-8 py-8", className, ...props }) => {
  const { getClasses } = useTheme();
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ padding, ...props });
  const styles = twMerge5(overridesDefaults, className);
  return /* @__PURE__ */ jsx11("div", {
    className: classNames7(styles),
    ...props,
    children
  });
};

// src/Grid/index.tsx
import { jsx as jsx12 } from "react/jsx-runtime";
var STYLE_PROPS2 = {
  BASE: "grid.base"
};
var displayProp2 = "grid";
var GridComponent = ({ children, className, ...rest }) => {
  const { getClasses } = useTheme();
  const baseStyle = getClasses == null ? void 0 : getClasses(STYLE_PROPS2.BASE);
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ displayProp: displayProp2, ...rest });
  const styles = twMerge6(baseStyle, overridesDefaults, className);
  return /* @__PURE__ */ jsx12("div", {
    className: classNames8(styles, className),
    children
  });
};
GridComponent.displayName = "Grid";
GridItem.displayName = "Grid.Item";
var Grid = Object.assign(GridComponent, {
  Item: GridItem
});

// src/Hero/Item.tsx
import { jsxs as jsxs3 } from "react/jsx-runtime";
var Item = ({ children, className, ...props }) => {
  return /* @__PURE__ */ jsxs3(Grid.Item, {
    ...props,
    children: [
      " ",
      children,
      " "
    ]
  });
};

// src/Hero/index.tsx
import { jsx as jsx13 } from "react/jsx-runtime";
var HeroComponent = ({ children = [], container: container2 = {}, className, ...props }) => {
  var _a, _b;
  const containerProps = container2 != null ? container2 : {};
  console.log("containerProps", containerProps);
  const items = (_a = children && (children == null ? void 0 : children.length)) != null ? _a : "1";
  const { getClasses } = useTheme();
  const defaultStyles = (_b = getClasses == null ? void 0 : getClasses(`hero.${items}`, "", true)) != null ? _b : {};
  const GridComponent2 = () => /* @__PURE__ */ jsx13(Grid, {
    ...{ ...defaultStyles, ...props },
    children
  });
  const WithContainer = () => container2 ? /* @__PURE__ */ jsx13(Container, {
    ...containerProps,
    children: /* @__PURE__ */ jsx13(GridComponent2, {})
  }) : /* @__PURE__ */ jsx13(GridComponent2, {});
  return /* @__PURE__ */ jsx13(WithContainer, {});
};
HeroComponent.displayName = "Hero";
Item.displayName = "Hero.Item";
var Hero = Object.assign(HeroComponent, {
  Item
});

// src/IconButton/index.tsx
import { Icon } from "rw-assets";
import { jsx as jsx14, jsxs as jsxs4 } from "react/jsx-runtime";
var IconButton = ({ fill = "fill-white", alignIcon = "left", children, icon = "phone", ...rest }) => {
  const alighRight = alignIcon == "right";
  const iconAlignStyle = alighRight ? "right-[-4px]" : "left-[-2px]";
  const buttonAlignStyle = alighRight ? "pr-12" : "pl-12";
  return /* @__PURE__ */ jsx14("div", {
    className: "flex",
    children: /* @__PURE__ */ jsxs4("div", {
      className: "relative flex flex-0 items-center",
      children: [
        /* @__PURE__ */ jsx14("div", {
          className: `absolute px-[15px] ${iconAlignStyle}`,
          children: /* @__PURE__ */ jsx14(Icon, {
            icon,
            fill
          })
        }),
        /* @__PURE__ */ jsx14(Button, {
          ...rest,
          className: buttonAlignStyle,
          children
        })
      ]
    })
  });
};
IconButton.displayName = "IconButton";

// src/IconText/index.tsx
import classNames9 from "classnames";
import { PlaceholderIcon, Icon as IconComp } from "rw-assets";
import { jsx as jsx15, jsxs as jsxs5 } from "react/jsx-runtime";
var defaultProps2 = {
  text: "Default icon text",
  icon: /* @__PURE__ */ jsx15(PlaceholderIcon, {}),
  fill: "fill-secondary",
  variant: "h5"
};
var STYLE_PROP = {
  BASE: "icontext.base",
  ICON: "icontext.icon",
  TEXT: "icontext.text"
};
var IconText = ({ text, fill, icon, variant, className }) => {
  const { getStyles } = useTheme();
  fill = fill != null ? fill : defaultProps2.fill;
  text = text != null ? text : defaultProps2.text;
  variant = variant != null ? variant : defaultProps2.variant;
  const isIconName = typeof icon == "string";
  const iconProps = {
    icon,
    fill
  };
  icon = isIconName ? /* @__PURE__ */ jsx15(IconComp, {
    ...iconProps
  }) : icon != null ? icon : defaultProps2.icon;
  return /* @__PURE__ */ jsxs5("div", {
    className: classNames9(getStyles == null ? void 0 : getStyles(STYLE_PROP.BASE), className),
    children: [
      /* @__PURE__ */ jsx15("div", {
        className: classNames9(getStyles == null ? void 0 : getStyles(STYLE_PROP.ICON)),
        children: icon
      }),
      /* @__PURE__ */ jsx15(Typography, {
        variant,
        className: classNames9(getStyles == null ? void 0 : getStyles(STYLE_PROP.TEXT)),
        children: text
      })
    ]
  });
};

// src/ImageText/index.tsx
import classNames10 from "classnames";

// src/Typography/helper.ts
import React2 from "react";
var getElement = (variant) => {
  switch (variant) {
    case "link":
      return { element: "span" };
    case "paragraph":
      return { element: "p" };
    case "display1":
      return { element: "h1" };
    case "display2":
      return { element: "h2" };
    case "display3":
      return { element: "h3" };
    case "display4":
      return { element: "h4" };
    default:
      return { element: variant };
  }
};
var getComponent = ({
  variant,
  ref,
  className,
  children,
  as,
  ...rest
}) => {
  return React2.createElement(
    as || getElement(variant).element,
    {
      ...rest,
      ref,
      className,
      "data-typography": variant
    },
    children
  );
};

// src/Typography/index.tsx
import { twMerge as twMerge7 } from "tailwind-merge";
var Typography = ({ variant = "h1", color, as, ref, children, className, ...rest }) => {
  const { getClasses } = useTheme();
  variant = variant != null ? variant : defaultProps.variant;
  console.log("Typography->", variant);
  const fontStyles = getClasses == null ? void 0 : getClasses(`typography.${variant}`);
  console.log("Typography-fs->", fontStyles);
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ ...rest, color });
  console.log("Typography-or->", overridesDefaults);
  const styles = twMerge7(fontStyles, overridesDefaults, className);
  console.log("Typography-styles->", styles);
  const component = getComponent({ variant, ref, as, children, className: styles });
  return component;
};

// src/ImageText/index.tsx
import { PlaceholderImage } from "rw-assets";
import { jsx as jsx16, jsxs as jsxs6 } from "react/jsx-runtime";
var defaultProps3 = {
  caption: "Default image caption",
  img: PlaceholderImage,
  vertical: true,
  aligncontent: "items-center",
  demo: false
};
var ImageText = ({
  caption = defaultProps3.caption,
  title = defaultProps3.title,
  subtitle = defaultProps3.subtitle,
  desc = defaultProps3.desc,
  vertical = defaultProps3.vertical,
  aligncontent = defaultProps3.aligncontent,
  img: Img = defaultProps3.img
}) => {
  const { getStyles } = useTheme();
  const direction = vertical ? "vertical" : "horizontal";
  return /* @__PURE__ */ jsxs6("div", {
    "data-image-text": true,
    className: classNames10(getStyles == null ? void 0 : getStyles("imagetext.base"), getStyles == null ? void 0 : getStyles(`imagetext.${direction}`), aligncontent),
    children: [
      Img ? /* @__PURE__ */ jsx16(Img, {}) : "",
      /* @__PURE__ */ jsxs6("div", {
        className: classNames10(getStyles == null ? void 0 : getStyles("imagetext.textbase"), aligncontent),
        children: [
          caption ? /* @__PURE__ */ jsx16(Typography, {
            variant: "h4",
            children: caption
          }) : "",
          title ? /* @__PURE__ */ jsx16(Typography, {
            variant: "h4",
            children: title
          }) : "",
          subtitle ? /* @__PURE__ */ jsx16(Typography, {
            variant: "h4",
            children: subtitle
          }) : "",
          desc ? /* @__PURE__ */ jsx16(Typography, {
            variant: "h5",
            children: desc
          }) : ""
        ]
      })
    ]
  });
};

// src/Link/index.tsx
import classNames11 from "classnames";
import { jsx as jsx17, jsxs as jsxs7 } from "react/jsx-runtime";
var Link = ({ href, icon, children, className, typographyProps }) => {
  const cls = icon ? { container: "flex items-center" } : { container: "inline" };
  const linkCls = icon ? "pl-2" : "";
  return /* @__PURE__ */ jsxs7("div", {
    className: classNames11(cls.container),
    children: [
      icon ? icon : "",
      /* @__PURE__ */ jsx17("a", {
        href,
        className: classNames11(className, linkCls),
        children: typeof children == "string" ? /* @__PURE__ */ jsx17(Typography, {
          variant: "link",
          ...typographyProps,
          children
        }) : children
      })
    ]
  });
};

// src/NavBar/NavBar.tsx
import classNames14 from "classnames";

// src/NavBar/NavBarCollapse.tsx
import { jsx as jsx18 } from "react/jsx-runtime";
var NavBarCollapse = ({ children, className, ...props }) => {
  const { getStyles } = useTheme();
  const base2 = getStyles == null ? void 0 : getStyles("navbar.collapse.base");
  const list = getStyles == null ? void 0 : getStyles("navbar.collapse.list");
  return /* @__PURE__ */ jsx18("div", {
    className: base2,
    ...props,
    children: /* @__PURE__ */ jsx18("ul", {
      className: list,
      children
    })
  });
};

// src/NavBar/NavBarLogo.tsx
import classNames12 from "classnames";
import { jsx as jsx19 } from "react/jsx-runtime";
var NavBarLogo = ({ children, href, className, ...props }) => {
  const { getStyles } = useTheme();
  return /* @__PURE__ */ jsx19("a", {
    href,
    className: classNames12(
      getStyles == null ? void 0 : getStyles("navbar.logo"),
      className
    ),
    ...props,
    children
  });
};

// src/NavBar/NavBarLink.tsx
import classNames13 from "classnames";
import { jsx as jsx20 } from "react/jsx-runtime";
var NavBarLink = ({ active, disabled, href, children, className, ...props }) => {
  const { getStyles } = useTheme();
  return /* @__PURE__ */ jsx20("li", {
    children: /* @__PURE__ */ jsx20("a", {
      href,
      className: classNames13(
        getStyles == null ? void 0 : getStyles("navbar.link.base"),
        className
      ),
      ...props,
      children
    })
  });
};

// src/NavBar/NavBarLinks.tsx
import { Fragment as Fragment2, jsx as jsx21 } from "react/jsx-runtime";
var defaultValues = {
  links: [
    { children: "Menu Item", href: "" },
    { children: "Menu Item", href: "" },
    { children: "Menu Item", href: "" }
  ]
};
var NavBarLinks = ({ links = defaultValues.links }) => {
  return /* @__PURE__ */ jsx21(Fragment2, {
    children: links == null ? void 0 : links.map((link, key) => /* @__PURE__ */ jsx21(NavBar.Link, {
      ...link
    }))
  });
};

// src/NavBar/NavBar.tsx
import { jsx as jsx22 } from "react/jsx-runtime";
var STYLE_PROPS3 = {
  BASE: "navbar.nav.base",
  CONTAINER: "navbar.nav.container"
};
var NavBarComponent = ({
  children,
  rounded,
  border,
  className,
  ...props
}) => {
  const { getClasses } = useTheme();
  const baseClasses = getClasses == null ? void 0 : getClasses(`${STYLE_PROPS3.BASE}`);
  const containerClasses = getClasses == null ? void 0 : getClasses(`${STYLE_PROPS3.CONTAINER}`);
  return /* @__PURE__ */ jsx22(Container, {
    children: /* @__PURE__ */ jsx22("nav", {
      className: classNames14(baseClasses),
      ...props,
      children: /* @__PURE__ */ jsx22("div", {
        "nav-container": true,
        className: classNames14(containerClasses),
        children
      })
    })
  });
};
NavBarComponent.displayName = "NavBar";
NavBarLogo.displayName = "NavBar.Logo";
NavBarCollapse.displayName = "NavBar.Collapse";
NavBarLink.displayName = "NavBar.Link";
NavBarLinks.displayName = "NavBar.Links";
var NavBar = Object.assign(NavBarComponent, {
  Logo: NavBarLogo,
  Collapse: NavBarCollapse,
  Link: NavBarLink,
  Links: NavBarLinks
});

// src/DemoContainer/index.tsx
import classNames15 from "classnames";
import { jsxs as jsxs8 } from "react/jsx-runtime";
var DemoContainer = ({ children, bgcolor, center, className }) => {
  bgcolor = bgcolor != null ? bgcolor : "bg-primary";
  return /* @__PURE__ */ jsxs8("div", {
    "wingo-container": true,
    className: classNames15(className, "p-8 border border-[#f2f2f2] rounded-lg"),
    children: [
      " ",
      children
    ]
  });
};

// src/Underline/index.tsx
import { twMerge as twMerge8 } from "tailwind-merge";
import { jsx as jsx23 } from "react/jsx-runtime";
var defaultStyle = "border-2 border-secondary w-[40px] mb-4";
var Underline = ({ children, className, ...rest }) => {
  const { getClasses } = useTheme();
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ ...rest });
  const styles = twMerge8(defaultStyle, overridesDefaults, className);
  return /* @__PURE__ */ jsx23("div", {
    "data-component": "underline",
    className: styles
  });
};

// src/Spacer/index.tsx
import classNames16 from "classnames";
import { jsx as jsx24 } from "react/jsx-runtime";
var Spacer = ({
  children,
  className,
  ...props
}) => {
  return /* @__PURE__ */ jsx24("div", {
    className: classNames16(className),
    children: "\xA0"
  });
};

// src/Surface/index.tsx
import classNames17 from "classnames";
import { twMerge as twMerge9 } from "tailwind-merge";
import { jsx as jsx25 } from "react/jsx-runtime";
var defaultProps4 = {
  bgcolor: "bg-surface",
  color: "text-onsurface",
  padding: ""
};
var Surface = ({ bgcolor = defaultProps4.bgcolor, padding = defaultProps4.padding, color = defaultProps4.color, className, elevation, children, ...rest }) => {
  const { getClasses } = useTheme();
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ bgcolor, color, padding, ...rest });
  const styles = twMerge9(overridesDefaults, className);
  return /* @__PURE__ */ jsx25("div", {
    "data-component": "surface",
    "data-elevation": elevation,
    className: classNames17(styles),
    children
  });
};
Surface.displayName = "Surface";

// src/Column/index.tsx
import classNames18 from "classnames";
import { twMerge as twMerge10 } from "tailwind-merge";
import { jsx as jsx26 } from "react/jsx-runtime";
var defaultProps5 = { col: "column-1" };
var Column = ({ children, col = defaultProps5.col, className, ...props }) => {
  const { getClasses } = useTheme();
  const overridesDefaults = getClasses == null ? void 0 : getClasses({ col, ...props });
  const styles = twMerge10(overridesDefaults, className);
  return /* @__PURE__ */ jsx26("div", {
    className: classNames18(styles),
    ...props,
    children
  });
};

// src/TypographyHighlight/index.tsx
import { createElement } from "react";
import { highlight } from "rw-utils";
var DEFAULT_HIGHLIGHT_ELEMENT = "span";
var defaultProps6 = {
  highlights: [
    { highlight: "default text to demonstrate", typography: { variant: "h2", as: "span", color: "text-white", bgcolor: "bg-danger" } },
    { highlight: "Please", typography: { variant: "h2", as: "span", color: "text-white", bgcolor: "bg-danger" } }
  ],
  variant: "h2",
  color: "text-danger",
  children: "This is the default text to demonstrate the highlight component. Please provide desired props."
};
var defaultDisplay = "inline-block";
var TypographyHighlight = ({
  highlights = defaultProps6.highlights,
  variant = defaultProps6.variant,
  color = defaultProps6.color,
  children = defaultProps6.children,
  ...rest
}) => {
  const mappedHighlights = highlights == null ? void 0 : highlights.map((highlight2) => {
    var _a;
    const { display, variant: variant2, color: typoColor, as: typoAs, ...rest2 } = (_a = highlight2.typography) != null ? _a : {};
    highlight2.typography.display = display != null ? display : defaultDisplay;
    highlight2.typography.variant = variant2 != null ? variant2 : variant2;
    highlight2.typography.color = typoColor != null ? typoColor : color;
    highlight2.typography.as = typoAs != null ? typoAs : DEFAULT_HIGHLIGHT_ELEMENT;
    highlight2.typography = { ...rest2, ...highlight2.typography };
    console.log("typo", highlight2);
    return highlight2;
  });
  const regexes = mappedHighlights.map(({ highlight: highlight2 }) => new RegExp(`\\b${highlight2}\\b`, "ig"));
  return createElement(Typography, { variant, color, ...rest }, highlight(children, regexes, mappedHighlights, Typography));
};

// src/TypographyUnderlined/index.tsx
import { jsx as jsx27, jsxs as jsxs9 } from "react/jsx-runtime";
var UnderlinedTypography = ({ children, ...props }) => {
  return /* @__PURE__ */ jsxs9(Box, {
    children: [
      " ",
      /* @__PURE__ */ jsx27(Typography, {
        ...props,
        children
      }),
      /* @__PURE__ */ jsx27("div", {
        className: "border-b-[5px] pb-2 border-secondary w-[50px]"
      })
    ]
  });
};

// src/DropDown/index.tsx
import { jsx as jsx28, jsxs as jsxs10 } from "react/jsx-runtime";
var DropDown = ({ children, className, ...props }) => {
  return /* @__PURE__ */ jsx28("form", {
    className: "w-20 p-20",
    children: /* @__PURE__ */ jsx28("fieldset", {
      children: /* @__PURE__ */ jsxs10("div", {
        className: "relative border border-gray-300 text-gray-800 bg-white shadow-lg",
        children: [
          /* @__PURE__ */ jsxs10("select", {
            className: "appearance-none w-20 py-1 px-2 bg-white",
            ...props,
            name: "whatever",
            id: "frm-whatever",
            children: [
              /* @__PURE__ */ jsx28("option", {
                value: "theme-AB",
                children: "AB"
              }),
              /* @__PURE__ */ jsx28("option", {
                value: "theme-VB",
                children: "VB"
              }),
              /* @__PURE__ */ jsx28("option", {
                value: "theme-mw",
                children: "MW"
              }),
              /* @__PURE__ */ jsx28("option", {
                value: "theme-cw",
                children: "CW"
              }),
              /* @__PURE__ */ jsx28("option", {
                value: "dark",
                children: "Dark"
              })
            ]
          }),
          /* @__PURE__ */ jsx28("div", {
            className: "pointer-events-none absolute right-0 top-0 bottom-0 flex items-center px-2 text-gray-700 border-l",
            children: /* @__PURE__ */ jsx28("svg", {
              className: "h-4 w-4",
              xmlns: "http://www.w3.org/2000/svg",
              viewBox: "0 0 20 20",
              children: /* @__PURE__ */ jsx28("path", {
                d: "M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"
              })
            })
          })
        ]
      })
    })
  });
};

// src/ImageContent/index.tsx
import classNames19 from "classnames";
import { jsx as jsx29, jsxs as jsxs11 } from "react/jsx-runtime";
var ImageContent = ({ heading, img: Img, subheading, desc, swapcols, className, ...props }) => {
  const styles = {
    base: "w-full flex-1 grid grid-cols-2 divide-x-8 divide-acccent px-10",
    col: "justify-self-center self-center px-4",
    swapcols: "order-last",
    colImage: "",
    colText: ""
  };
  return /* @__PURE__ */ jsxs11("div", {
    "data-component": "featured-image",
    className: classNames19(styles.base, className),
    ...props,
    children: [
      /* @__PURE__ */ jsx29("div", {
        className: classNames19(styles.col, styles.colImage, swapcols ? styles.swapcols : ""),
        children: Img ? /* @__PURE__ */ jsx29(Img, {}) : ""
      }),
      /* @__PURE__ */ jsxs11("div", {
        className: classNames19(styles.col, styles.colText),
        children: [
          /* @__PURE__ */ jsx29(Typography, {
            variant: "h2",
            className: "text-acccent",
            children: heading
          }),
          subheading ? /* @__PURE__ */ jsx29(Typography, {
            variant: "h3",
            children: subheading
          }) : "",
          desc ? /* @__PURE__ */ jsx29(Typography, {
            variant: "paragraph",
            children: desc
          }) : ""
        ]
      })
    ]
  });
};

// src/Palette/index.tsx
import classNames20 from "classnames";
import { jsx as jsx30, jsxs as jsxs12 } from "react/jsx-runtime";
function Palette({ code, variant }) {
  return /* @__PURE__ */ jsx30("div", {
    className: classNames20(variant, "table-cell h-[50px] w-[200px] text-end p-1"),
    children: variant.match(/\d+/)
  });
}
var values = {
  primary: {
    50: "bg-primary-50",
    100: "bg-primary-100",
    200: "bg-primary-200",
    300: "bg-primary-300",
    400: "bg-primary-400",
    500: "bg-primary-500",
    600: "bg-primary-600",
    700: "bg-primary-700",
    800: "bg-primary-800",
    900: "bg-primary-900"
  },
  secondary: {
    50: "bg-secondary-50",
    100: "bg-secondary-100",
    200: "bg-secondary-200",
    300: "bg-secondary-300",
    400: "bg-secondary-400",
    500: "bg-secondary-500",
    600: "bg-secondary-600",
    700: "bg-secondary-700",
    800: "bg-secondary-800",
    900: "bg-secondary-900"
  },
  acccent: {
    50: "bg-acccent-50",
    100: "bg-acccent-100",
    200: "bg-acccent-200",
    300: "bg-acccent-300",
    400: "bg-acccent-400",
    500: "bg-acccent-500",
    600: "bg-acccent-600",
    700: "bg-acccent-700",
    800: "bg-acccent-800",
    900: "bg-acccent-900"
  },
  neutral: {
    50: "bg-neutral-50",
    100: "bg-neutral-100",
    200: "bg-neutral-200",
    300: "bg-neutral-300",
    400: "bg-neutral-400",
    500: "bg-neutral-500",
    600: "bg-neutral-600",
    700: "bg-neutral-700",
    800: "bg-neutral-800",
    900: "bg-neutral-900"
  },
  blue: {
    50: "bg-blue-50",
    100: "bg-blue-100",
    200: "bg-blue-200",
    300: "bg-blue-300",
    400: "bg-blue-400",
    500: "bg-blue-500",
    600: "bg-blue-600",
    700: "bg-blue-700",
    800: "bg-blue-800",
    900: "bg-blue-900"
  },
  green: {
    50: "bg-green-50",
    100: "bg-green-100",
    200: "bg-green-200",
    300: "bg-green-300",
    400: "bg-green-400",
    500: "bg-green-500",
    600: "bg-green-600",
    700: "bg-green-700",
    800: "bg-green-800",
    900: "bg-green-900"
  },
  sky: {
    50: "bg-sky-50",
    100: "bg-sky-100",
    200: "bg-sky-200",
    300: "bg-sky-300",
    400: "bg-sky-400",
    500: "bg-sky-500",
    600: "bg-sky-600",
    700: "bg-sky-700",
    800: "bg-sky-800",
    900: "bg-sky-900"
  },
  amber: {
    50: "bg-amber-50",
    100: "bg-amber-100",
    200: "bg-amber-200",
    300: "bg-amber-300",
    400: "bg-amber-400",
    500: "bg-amber-500",
    600: "bg-amber-600",
    700: "bg-amber-700",
    800: "bg-amber-800",
    900: "bg-amber-900"
  }
};
function Palettes({ variant = "secondary" }) {
  return /* @__PURE__ */ jsxs12("div", {
    className: "flex flex-col mr-4",
    children: [
      /* @__PURE__ */ jsx30(Typography, {
        variant: "h6",
        children: variant.toUpperCase()
      }),
      Object.keys(values[variant]).map((value) => {
        const pallete = values[variant][value];
        return /* @__PURE__ */ jsx30(Palette, {
          variant: pallete
        });
      })
    ]
  });
}
function AllPalettes() {
  return /* @__PURE__ */ jsxs12("div", {
    className: "grid grid-cols-4",
    children: [
      /* @__PURE__ */ jsx30(Palettes, {
        variant: "primary"
      }),
      /* @__PURE__ */ jsx30(Palettes, {
        variant: "secondary"
      }),
      /* @__PURE__ */ jsx30(Palettes, {
        variant: "acccent"
      }),
      /* @__PURE__ */ jsx30(Palettes, {
        variant: "blue"
      }),
      /* @__PURE__ */ jsx30(Palettes, {
        variant: "green"
      }),
      /* @__PURE__ */ jsx30(Palettes, {
        variant: "neutral"
      }),
      /* @__PURE__ */ jsx30(Palettes, {
        variant: "sky"
      }),
      /* @__PURE__ */ jsx30(Palettes, {
        variant: "amber"
      })
    ]
  });
}
export {
  AllPalettes,
  Box,
  Button,
  ButtonGroup,
  Card,
  CardIconText,
  Column,
  Container,
  Content,
  DemoContainer,
  DropDown,
  Flex,
  Footer,
  Grid,
  GridComponent,
  Hero,
  IconButton,
  IconText,
  ImageContent,
  ImageText,
  Link,
  NavBar,
  Spacer,
  Surface,
  ThemeContext,
  ThemeProvider,
  Typography,
  TypographyHighlight,
  Underline,
  UnderlinedTypography,
  defaultTheme,
  hero,
  useTheme
};
